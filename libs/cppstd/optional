#pragma once
#include <cassert>

///////////////////////////////////////////////////////////
// optional type
//////////////////////////////////////////////////////

namespace std
{

struct nullopt_t {};
constexpr nullopt_t nullopt;

template<class T>
class optional
{
private:
	bool Valid = false;
	char Data[sizeof(T)];

public:
	T &operator*()
	{
		assert(Valid);
		return *(T*)&Data;
	}
	const T &operator*() const
	{
		assert(Valid);
		return *(T*)&Data;
	}

	T *operator->()
	{
		assert(Valid);
		return &**this;
	}
	const T *operator->() const
	{
		assert(Valid);
		return &**this;
	}

	void destroy()
	{
		if(Valid)
			((T*)&Data)->~T();
		Valid = false;
	}

	bool isValid() const { return Valid; }
	bool has_value() const { return isValid();}
	explicit operator bool() const { return isValid(); }
	bool operator!() const { return !isValid(); }

	template<class... A>
	void emplace(A&&... args)
	{
		destroy();
		new(Data) T(std::forward<A>(args)...);
		Valid = true;
	}

	optional &operator=(const optional &rhs)
	{
		if(!rhs.Valid)
			destroy();
		else if(!Valid)
			emplace(*(T*)rhs.Data);
		else
			*(T*)Data = *(T*)rhs.Data;
		Valid = rhs.Valid;
		return *this;
	}
	optional &operator=(optional &&rhs)
	{
		if(!rhs.Valid)
			destroy();
		else if(!Valid)
			emplace(std::move(*(T*)rhs.Data));
		else
			(*(T*)Data) = std::move(*(T*)rhs.Data);
		Valid = rhs.Valid;
		return *this;
	}

	optional() {};
	optional(const optional &rhs) { *this = rhs; }
	optional(optional &&rhs) { *this = std::move(rhs); }
	optional(nullopt_t) {}

	template<class... A>
	optional(A&&... args)
	{
		new(Data) T(std::forward<A>(args)...);
		Valid = true;
	}
	~optional()
	{
		destroy();
	}
};

}